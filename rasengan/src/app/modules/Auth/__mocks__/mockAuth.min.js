import{ME_URL,REGISTER_URL,REQUEST_PASSWORD_URL}from"../_redux/authCrud";import userTableMock from"./userTableMock";export default function mockAuth(mock){function generateUserId(){const ids=userTableMock.map(el=>el.id),maxId=Math.max(...ids);return maxId+1}mock.onPost(REGISTER_URL).reply(({data:data})=>{const{email:email,fullname:fullname,username:username,password:password}=JSON.parse(data);if(email&&fullname&&username&&password){const user={id:generateUserId(),email:email,fullname:fullname,username:username,password:password,roles:[2],accessToken:"access-token-"+Math.random(),refreshToken:"access-token-"+Math.random(),pic:process.env.PUBLIC_URL+"/media/users/default.jpg"};return userTableMock.push(user),[200,{...user,password:void 0}]}return[400]}),mock.onPost(REQUEST_PASSWORD_URL).reply(({data:data})=>{const{email:email}=JSON.parse(data);if(email){const user=userTableMock.find(x=>x.email.toLowerCase()===email.toLowerCase());if(user)return user.password=void 0,[200,{...user,password:void 0}]}return[400]}),mock.onGet(ME_URL).reply(({headers:{Authorization:Authorization}})=>{const accessToken=Authorization&&Authorization.startsWith("Bearer ")&&Authorization.slice("Bearer ".length);if(accessToken){const user=userTableMock.find(x=>x.accessToken===accessToken);if(user)return[200,{...user,password:void 0}]}return[401]})};